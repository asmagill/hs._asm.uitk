
  Document

  Test

  Update timer to use more inclusive run loop modes

  mouse tracking for other/all elements? (not just container element)

+ extend element wrapper and _properties support so that it can be used for others that replicate it?
+     e.g. menuitem, open/savePanel, etc.
+     how to verify one of ours?
+         uitk.element.isElementType will verify it's an element type (so no need to check _inheritedProperties, e.g.)
+         is it sufficient to verify _propertyList exists in MT?

  Move _asm.text (arbitrary text size and encoding) into utils
      finish regex support for utf16 and utf8

  Menu stuff:
      For menu:
          Checkout services...
              can we provide them or use them easily? Early research was less then promising re
              providing them (too much required Info.plist set before application run) but as to
              using them, never really checked.
          Can popup menu be in background thread to prevent blocking? (or are runloop changes sufficient?)

      For menuitem:
          some special keys don't seem to be caught; need to see if we can fix that or make list of them and remove from table

      For statusitem:
+         hs.menubar wrapper
+         drag and drop for button itself?
              for items? may have to add "springLoaded" to allow drag and drop to menu items

       For legacy:
+         stateImageSize implemented in legacy; onus on user for new approach
          image position wrong when both title and icon are set
          wrap legacy callback functions so "proper" userdata sent

p     menubar rewrite so it can use views for status icon and menu items
          status item userdata takes two userdatas: view (element) and menu
+         menu userdata comprises actual menu and can be used in other locations (e.g. avplayer) that allow for menu assignment
+         menu should be a list of menubaritem userdata objects
?         allows for dynamic updates even if menu being displayed

    uitk.window
        tabs
        add modal sheet support
        NSAlert sheet support?

 +  __view needs wrap method that checks container for way to wrap element
 +  add wrap method to container, container.scroller, container.grid


+ move drawing.color into util
+     add proper color list support (NSColorList)

+ rewrite canvas so it's parent window is no longer necessary -- it can use `hs._asm.uitk` with appropriate constructor wrapper
      add support for cX, cY, rX, and bY
+     add fittingSize to canvas -- tracks set size
+     change proper constructor to new and move "new" into _legacy.new like with menubar?
+         should other "legacy" aware methods be moved/duplicated in _legacy as well?
+     wrap legacy callback functions so "proper" userdata sent

+ move in turtleDraw

  rewrite webview so it's parent window is no longer necessary -- it can use `hs._asm.uitk` with appropriate constructor wrapper
      check fittingSize and see if WKWebView already does this correctly
      move toolbar to uitk.util

  examples
      add sample type to documentation/docset generators
      individual
      combinations

 panel
  +   NSSavePanel
  +   NSOpenPanel
      NSFontPanel
          may be some methods in text*... move out?
          relies on NSFontManager a lot...
          do we need to redo styledtext as well?
  +   NSColorPanel  -- move out of colorwell? is it in others?
  +       add NSColorList support?
  +           create lua portion for panel so uitk.util.color can be loaded
          should accessory be auto-removed whenever panel hidden?
      NSAlert doesn't have non-modal option... should we write our own using these modules?

+ table
      add lua file so column data can be wrapped as well
      other metamethods?

+ grid
   +  add table parsing to new, :insertColumn, and :insertRow
      merge at grid level for 2d merge (mergeCellsInHorizontalRange:verticalRange:)?

  popUpButton
      investigate setTitle
          but for pullsDown(false), it *shouldn't* create a new item if doesn't exist
          for pullsDown(true) does it create new item or change 1st menu item?
      should inherit from NSButton -- it is a subclass
          but most additions don't look that useful...
          make it a submodule (like textField stuff) or copy methods into?

  textField
      what level of parity can this have with textView?
      NSSearchField?
      NSTokenField?

+ scrolling textview element
+     ruler?
+     style change toolbar?

  textView
      rename textView to just text?
      remove ruler, etc. stuff that requires scrollbar to work anyways?
      what should callback?
          -- add same editing/callbacks as textField?

    - (NSUInteger)characterIndexForInsertionAtPoint:(NSPoint)point;
    - (NSArray<NSString *> *)completionsForPartialWordRange:(NSRange)charRange indexOfSelectedItem:(NSInteger *)index;

    - (void)showFindIndicatorForRange:(NSRange)charRange;
    - (void)setLayoutOrientation:(NSTextLayoutOrientation)orientation;
    - (void)setNeedsDisplayInRect:(NSRect)rect avoidAdditionalLayout:(BOOL)flag;
    - (void)setSpellingState:(NSInteger)value range:(NSRange)charRange;

    // from NSText (parent)
        - (BOOL)readRTFDFromFile:(NSString *)path;
        - (BOOL)writeRTFDToFile:(NSString *)path atomically:(BOOL)flag;
        - (NSData *)RTFDFromRange:(NSRange)range;
        - (NSData *)RTFFromRange:(NSRange)range;

  pi in the sky
      replace console with one built from these modules? Would allow for easy addition of tabs,
          direct output to specific window/tab, etc.

-- probable or in progress

+   hs.canvas
+   hs.canvas.turtle

*   @interface NSButton               : NSControl
+       @interface NSPopUpButton          : NSButton
*   @interface NSColorWell            : NSControl
*?  @interface NSComboButton          : NSControl  -- not sure how to handle backport
+   @interface NSDatePicker           : NSControl
+   @interface NSImageView            : NSControl
+   @interface NSLevelIndicator       : NSControl
+   @interface NSSlider               : NSControl
+   @interface NSStepper              : NSControl
*   @interface NSSwitch               : NSControl
+   @interface NSTextField            : NSControl
+       @interface NSComboBox             : NSTextField
+       @interface NSSecureTextField      : NSTextField
+       @interface NSSearchField          : NSTextField
        @interface NSTokenField           : NSTextField
+   @interface NSSegmentedControl     : NSControl
+   @interface NSPathControl          : NSControl

    @interface NSRuleEditor           : NSControl
+   @interface NSTableView            : NSControl
  na    @interface NSTableCellView        : NSView
  ?     @interface NSTableHeaderView      : NSView
  +     @interface NSTableRowView         : NSView
        @interface NSOutlineView          : NSTableView

+   @interface AVPlayerView           : NSView
+   @interface NSTabView              : NSView
    @interface NSVisualEffectView     : NSView

+   @interface NSBox                  : NSView
*   @interface NSProgressIndicator    : NSView
+   @interface NSGridView             : NSView
+   @interface NSScrollView           : NSView
        @interface NSClipView             : NSView    -- paired with NSScrollView
        @interface NSRulerView            : NSView    -- for custom in NSText/NSScrollView
        @interface NSScroller             : NSControl -- for custom in NSScrollView
+   @interface NSTextView             : NSText


+   @interface NSGestureRecognizer        In utils?
+       NSClickGestureRecognizer
+       NSMagnificationGestureRecognizer
+       NSPanGestureRecognizer
+       NSPressGestureRecognizer
+       NSRotationGestureRecognizer

-- not sure but not ruled out yet

    @interface NSBrowser                  : NSControl
    @interface NSSplitView                : NSView

    @interface SCNView                    : NSView -- SceneKit framework
    @interface SKView                     : NSView -- SpriteKit framework
        @interface SKNode                 : NSResponder
    @interface PDFView                    : NSView -- PDFKit framework

    @interface NSPopover                  : NSResponder

    @interface ABPeoplePickerView         : NSView -- AddressBook framework
    @interface ABPersonView               : NSView -- AddressBook framework
    @interface AMWorkflowView             : NSView -- Automator framework
    @interface AUGenericView              : NSView -- AudioKit framework
    @interface AUPannerView               : NSView -- AudioKit framework
    @interface AVCaptureView              : NSView -- AVKit framework
    @interface AVRoutePickerView          : NSView -- AVKit framework
    @interface IKCameraDeviceView         : NSView -- ImageKit framework
    @interface IKDeviceBrowserView        : NSView -- ImageKit framework
    @interface IKFilterBrowserView        : NSView -- ImageKit framework
    @interface IKFilterUIView             : NSView -- ImageKit framework
    @interface IKImageBrowserView         : NSView -- ImageKit framework
    @interface IKImageView                : NSView -- ImageKit framework
    @interface IKScannerDeviceView        : NSView -- ImageKit framework
    @interface MKAnnotationView           : NSView -- MapKit framework
    @interface MKCompassButton            : NSView -- MapKit framework
    @interface MKMapView                  : NSView -- MapKit framework
    @interface MKPitchControl             : NSView -- MapKit framework
    @interface MKZoomControl              : NSView -- MapKit framework
    @interface MTKView                    : NSView -- MapKit framework

